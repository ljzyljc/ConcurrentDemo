
### 管程，并发编程的万能钥匙

1.操作系统：信号量能解决所有的并发问题
2.管程和信号量是等价的，所谓等价指的是用管程能够实现信号量，也能用信号实现管程。但是管程更容易使用，所以Java选择了管程。

管程，对应的英文是Monitor，Java领域都喜欢防御为'监视器'，操作系统领域一般都翻译成'管程'

所谓管程，指的是管理共享变量以及对共享变量的操作过程，让他们支持并发。翻译为Java领域的语言，
就是管理类的成员变量和成员方法，让这个类是线程安全的。


Hasen模型，Hoare模型和MESA模型，现在广泛应用的是MESA模型，Java管程的实现参考的也是MESA模型

                互斥和同步

A:管程如何解决互斥问题？

管程解决互斥问题的思路很简单，就是将共享变量及其对共享变量的操作统一封装起来。

    monitorX{
        //共享变量：队列
        var queue;
        //操作：入队
        func enq();
        //操作：出队
        func deq();
    }

管程X将共享变量queue这个队列和相关的操作入队enq(),出队deq（),都封装起来了;
线程A和线程B如果想访问共享变量queue，只能通过调用管程提供的enq(),deq()方法来实现;
enq(),deq()保证互斥性，只允许一个线程进入管程。

管程模型和面向对象高度契合的，估计这也是Java选择管程的原因吧。

B:管程如何解决线程间的同步问题？

在管程模型里，共享变量和对共享变量的操作是被封装起来的。










